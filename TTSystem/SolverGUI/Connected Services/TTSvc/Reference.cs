//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações a este ficheiro poderão provocar um comportamento incorrecto e perder-se-ão se
//     o código for regenerado.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GUI.TTSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/TTService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GUI.TTSvc.Ticket[] TicketsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GUI.TTSvc.Ticket[] Tickets {
            get {
                return this.TicketsField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketsField, value) != true)) {
                    this.TicketsField = value;
                    this.RaisePropertyChanged("Tickets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ticket", Namespace="http://schemas.datacontract.org/2004/07/TTService")]
    [System.SerializableAttribute()]
    public partial class Ticket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GUI.TTSvc.User AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GUI.TTSvc.TicketStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GUI.TTSvc.User Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GUI.TTSvc.TicketStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TicketStatus", Namespace="http://schemas.datacontract.org/2004/07/TTService")]
    public enum TicketStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNASSIGNED = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ASSIGNED = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CLOSED = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecondaryQuestion", Namespace="http://schemas.datacontract.org/2004/07/TTService")]
    [System.SerializableAttribute()]
    public partial class SecondaryQuestion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SenderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TicketIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((this.DepartmentField.Equals(value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Question {
            get {
                return this.QuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionField, value) != true)) {
                    this.QuestionField = value;
                    this.RaisePropertyChanged("Question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Response {
            get {
                return this.ResponseField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseField, value) != true)) {
                    this.ResponseField = value;
                    this.RaisePropertyChanged("Response");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SenderID {
            get {
                return this.SenderIDField;
            }
            set {
                if ((this.SenderIDField.Equals(value) != true)) {
                    this.SenderIDField = value;
                    this.RaisePropertyChanged("SenderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TicketID {
            get {
                return this.TicketIDField;
            }
            set {
                if ((this.TicketIDField.Equals(value) != true)) {
                    this.TicketIDField = value;
                    this.RaisePropertyChanged("TicketID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TTSvc.ITTServ")]
    public interface ITTServ {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddUser", ReplyAction="http://tempuri.org/ITTServ/AddUserResponse")]
        int AddUser(GUI.TTSvc.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddUser", ReplyAction="http://tempuri.org/ITTServ/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(GUI.TTSvc.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/CheckUser", ReplyAction="http://tempuri.org/ITTServ/CheckUserResponse")]
        bool CheckUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/CheckUser", ReplyAction="http://tempuri.org/ITTServ/CheckUserResponse")]
        System.Threading.Tasks.Task<bool> CheckUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetUser", ReplyAction="http://tempuri.org/ITTServ/GetUserResponse")]
        GUI.TTSvc.User GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetUser", ReplyAction="http://tempuri.org/ITTServ/GetUserResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.User> GetUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/UpdateUser", ReplyAction="http://tempuri.org/ITTServ/UpdateUserResponse")]
        bool UpdateUser(GUI.TTSvc.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/UpdateUser", ReplyAction="http://tempuri.org/ITTServ/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(GUI.TTSvc.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddTicket", ReplyAction="http://tempuri.org/ITTServ/AddTicketResponse")]
        int AddTicket(GUI.TTSvc.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddTicket", ReplyAction="http://tempuri.org/ITTServ/AddTicketResponse")]
        System.Threading.Tasks.Task<int> AddTicketAsync(GUI.TTSvc.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTickets", ReplyAction="http://tempuri.org/ITTServ/GetTicketsResponse")]
        GUI.TTSvc.Ticket[] GetTickets(int author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTickets", ReplyAction="http://tempuri.org/ITTServ/GetTicketsResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.Ticket[]> GetTicketsAsync(int author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicketsByType", ReplyAction="http://tempuri.org/ITTServ/GetTicketsByTypeResponse")]
        GUI.TTSvc.Ticket[] GetTicketsByType(int author, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicketsByType", ReplyAction="http://tempuri.org/ITTServ/GetTicketsByTypeResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.Ticket[]> GetTicketsByTypeAsync(int author, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicket", ReplyAction="http://tempuri.org/ITTServ/GetTicketResponse")]
        GUI.TTSvc.Ticket GetTicket(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicket", ReplyAction="http://tempuri.org/ITTServ/GetTicketResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.Ticket> GetTicketAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddSolver", ReplyAction="http://tempuri.org/ITTServ/AddSolverResponse")]
        int AddSolver(GUI.TTSvc.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AddSolver", ReplyAction="http://tempuri.org/ITTServ/AddSolverResponse")]
        System.Threading.Tasks.Task<int> AddSolverAsync(GUI.TTSvc.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/CheckSolver", ReplyAction="http://tempuri.org/ITTServ/CheckSolverResponse")]
        bool CheckSolver(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/CheckSolver", ReplyAction="http://tempuri.org/ITTServ/CheckSolverResponse")]
        System.Threading.Tasks.Task<bool> CheckSolverAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetSolver", ReplyAction="http://tempuri.org/ITTServ/GetSolverResponse")]
        GUI.TTSvc.User GetSolver(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetSolver", ReplyAction="http://tempuri.org/ITTServ/GetSolverResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.User> GetSolverAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicketsSolver", ReplyAction="http://tempuri.org/ITTServ/GetTicketsSolverResponse")]
        GUI.TTSvc.Ticket[] GetTicketsSolver(int solver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicketsSolver", ReplyAction="http://tempuri.org/ITTServ/GetTicketsSolverResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.Ticket[]> GetTicketsSolverAsync(int solver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicketsByTypeSolver", ReplyAction="http://tempuri.org/ITTServ/GetTicketsByTypeSolverResponse")]
        GUI.TTSvc.Ticket[] GetTicketsByTypeSolver(int solver, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetTicketsByTypeSolver", ReplyAction="http://tempuri.org/ITTServ/GetTicketsByTypeSolverResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.Ticket[]> GetTicketsByTypeSolverAsync(int solver, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AnswerTicket", ReplyAction="http://tempuri.org/ITTServ/AnswerTicketResponse")]
        bool AnswerTicket(GUI.TTSvc.Ticket ticket, int solver, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AnswerTicket", ReplyAction="http://tempuri.org/ITTServ/AnswerTicketResponse")]
        System.Threading.Tasks.Task<bool> AnswerTicketAsync(GUI.TTSvc.Ticket ticket, int solver, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/RedirectTicket", ReplyAction="http://tempuri.org/ITTServ/RedirectTicketResponse")]
        bool RedirectTicket(GUI.TTSvc.Ticket ticket, int solver, string redirectMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/RedirectTicket", ReplyAction="http://tempuri.org/ITTServ/RedirectTicketResponse")]
        System.Threading.Tasks.Task<bool> RedirectTicketAsync(GUI.TTSvc.Ticket ticket, int solver, string redirectMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/CheckDepartment", ReplyAction="http://tempuri.org/ITTServ/CheckDepartmentResponse")]
        bool CheckDepartment(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/CheckDepartment", ReplyAction="http://tempuri.org/ITTServ/CheckDepartmentResponse")]
        System.Threading.Tasks.Task<bool> CheckDepartmentAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetDepartment", ReplyAction="http://tempuri.org/ITTServ/GetDepartmentResponse")]
        GUI.TTSvc.User GetDepartment(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetDepartment", ReplyAction="http://tempuri.org/ITTServ/GetDepartmentResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.User> GetDepartmentAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetQuestions", ReplyAction="http://tempuri.org/ITTServ/GetQuestionsResponse")]
        GUI.TTSvc.SecondaryQuestion[] GetQuestions(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/GetQuestions", ReplyAction="http://tempuri.org/ITTServ/GetQuestionsResponse")]
        System.Threading.Tasks.Task<GUI.TTSvc.SecondaryQuestion[]> GetQuestionsAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AnswerQuestion", ReplyAction="http://tempuri.org/ITTServ/AnswerQuestionResponse")]
        bool AnswerQuestion(string name, GUI.TTSvc.Ticket ticket, string responseMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITTServ/AnswerQuestion", ReplyAction="http://tempuri.org/ITTServ/AnswerQuestionResponse")]
        System.Threading.Tasks.Task<bool> AnswerQuestionAsync(string name, GUI.TTSvc.Ticket ticket, string responseMessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITTServChannel : GUI.TTSvc.ITTServ, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TTServClient : System.ServiceModel.ClientBase<GUI.TTSvc.ITTServ>, GUI.TTSvc.ITTServ {
        
        public TTServClient() {
        }
        
        public TTServClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TTServClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TTServClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TTServClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUser(GUI.TTSvc.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(GUI.TTSvc.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public bool CheckUser(string email) {
            return base.Channel.CheckUser(email);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserAsync(string email) {
            return base.Channel.CheckUserAsync(email);
        }
        
        public GUI.TTSvc.User GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.User> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public bool UpdateUser(GUI.TTSvc.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(GUI.TTSvc.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public int AddTicket(GUI.TTSvc.Ticket ticket) {
            return base.Channel.AddTicket(ticket);
        }
        
        public System.Threading.Tasks.Task<int> AddTicketAsync(GUI.TTSvc.Ticket ticket) {
            return base.Channel.AddTicketAsync(ticket);
        }
        
        public GUI.TTSvc.Ticket[] GetTickets(int author) {
            return base.Channel.GetTickets(author);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.Ticket[]> GetTicketsAsync(int author) {
            return base.Channel.GetTicketsAsync(author);
        }
        
        public GUI.TTSvc.Ticket[] GetTicketsByType(int author, string type) {
            return base.Channel.GetTicketsByType(author, type);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.Ticket[]> GetTicketsByTypeAsync(int author, string type) {
            return base.Channel.GetTicketsByTypeAsync(author, type);
        }
        
        public GUI.TTSvc.Ticket GetTicket(int id) {
            return base.Channel.GetTicket(id);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.Ticket> GetTicketAsync(int id) {
            return base.Channel.GetTicketAsync(id);
        }
        
        public int AddSolver(GUI.TTSvc.User user) {
            return base.Channel.AddSolver(user);
        }
        
        public System.Threading.Tasks.Task<int> AddSolverAsync(GUI.TTSvc.User user) {
            return base.Channel.AddSolverAsync(user);
        }
        
        public bool CheckSolver(string email) {
            return base.Channel.CheckSolver(email);
        }
        
        public System.Threading.Tasks.Task<bool> CheckSolverAsync(string email) {
            return base.Channel.CheckSolverAsync(email);
        }
        
        public GUI.TTSvc.User GetSolver(int id) {
            return base.Channel.GetSolver(id);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.User> GetSolverAsync(int id) {
            return base.Channel.GetSolverAsync(id);
        }
        
        public GUI.TTSvc.Ticket[] GetTicketsSolver(int solver) {
            return base.Channel.GetTicketsSolver(solver);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.Ticket[]> GetTicketsSolverAsync(int solver) {
            return base.Channel.GetTicketsSolverAsync(solver);
        }
        
        public GUI.TTSvc.Ticket[] GetTicketsByTypeSolver(int solver, string type) {
            return base.Channel.GetTicketsByTypeSolver(solver, type);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.Ticket[]> GetTicketsByTypeSolverAsync(int solver, string type) {
            return base.Channel.GetTicketsByTypeSolverAsync(solver, type);
        }
        
        public bool AnswerTicket(GUI.TTSvc.Ticket ticket, int solver, string email) {
            return base.Channel.AnswerTicket(ticket, solver, email);
        }
        
        public System.Threading.Tasks.Task<bool> AnswerTicketAsync(GUI.TTSvc.Ticket ticket, int solver, string email) {
            return base.Channel.AnswerTicketAsync(ticket, solver, email);
        }
        
        public bool RedirectTicket(GUI.TTSvc.Ticket ticket, int solver, string redirectMessage) {
            return base.Channel.RedirectTicket(ticket, solver, redirectMessage);
        }
        
        public System.Threading.Tasks.Task<bool> RedirectTicketAsync(GUI.TTSvc.Ticket ticket, int solver, string redirectMessage) {
            return base.Channel.RedirectTicketAsync(ticket, solver, redirectMessage);
        }
        
        public bool CheckDepartment(string name) {
            return base.Channel.CheckDepartment(name);
        }
        
        public System.Threading.Tasks.Task<bool> CheckDepartmentAsync(string name) {
            return base.Channel.CheckDepartmentAsync(name);
        }
        
        public GUI.TTSvc.User GetDepartment(string name) {
            return base.Channel.GetDepartment(name);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.User> GetDepartmentAsync(string name) {
            return base.Channel.GetDepartmentAsync(name);
        }
        
        public GUI.TTSvc.SecondaryQuestion[] GetQuestions(string name) {
            return base.Channel.GetQuestions(name);
        }
        
        public System.Threading.Tasks.Task<GUI.TTSvc.SecondaryQuestion[]> GetQuestionsAsync(string name) {
            return base.Channel.GetQuestionsAsync(name);
        }
        
        public bool AnswerQuestion(string name, GUI.TTSvc.Ticket ticket, string responseMessage) {
            return base.Channel.AnswerQuestion(name, ticket, responseMessage);
        }
        
        public System.Threading.Tasks.Task<bool> AnswerQuestionAsync(string name, GUI.TTSvc.Ticket ticket, string responseMessage) {
            return base.Channel.AnswerQuestionAsync(name, ticket, responseMessage);
        }
    }
}
